{"version":3,"sources":["redux/constants.ts","redux/reducer.ts","redux/store.ts","reportWebVitals.ts","theme.ts","redux/actions.ts","components/NavBar.tsx","components/Input.tsx","components/Home.tsx","components/Card.tsx","components/Container.tsx","App.tsx","index.tsx"],"names":["ADD_TODO","DELETE_TODO","FINISH_TODO","UNFINISH_TODO","SHOW","initialState","todos","show","rootReducer","state","action","type","payload","filter","todo","id","map","completed","store","createStore","applyMiddleware","thunk","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","extendTheme","styles","global","body","backgroundColor","colors","primary","NavBar","dispatch","useDispatch","direction","paddingTop","borderBottomRadius","shadow","width","opacity","margin","to","textAlign","fontWeight","paddingBottom","background","_hover","cursor","color","_focus","onClick","Input","useState","value","setValue","top","alignItems","onChange","e","preventDefault","target","placeholder","border","borderColor","orderColor","Date","now","content","colorScheme","variant","Home","position","zIndex","Card","t","handleSwitch","num","unfinishTodo","borderBottom","padding","justifyContent","divider","defaultChecked","setTimeout","as","FaTrash","Container","s","useSelector","spacing","borderRadius","height","App","theme","path","component","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5768dd28.chunk.js","sourcesContent":["export interface ITodo {\n    content: string,\n    completed: boolean,\n    id: number,\n}\n\nexport interface IState {\n    todos: ITodo[],\n    show: string,\n}\n\nexport const ADD_TODO = 'ADD_TODO'\nexport type ADD_TODO = typeof ADD_TODO;\n\nexport const DELETE_TODO = 'DELETE_TODO'\nexport type DELETE_TODO = typeof DELETE_TODO\n\nexport const FINISH_TODO = 'FINISH_TODO'\nexport type FINISH_TODO = typeof FINISH_TODO\n\nexport const UNFINISH_TODO = 'UNFINISH_TODO'\nexport type UNFINISH_TODO = typeof UNFINISH_TODO\n\nexport const SHOW = 'SHOW'\nexport type SHOW = typeof SHOW","import { Actions } from './actions'\nimport { ADD_TODO, DELETE_TODO, FINISH_TODO, ITodo, UNFINISH_TODO, IState, SHOW } from './constants'\n\nconst initialState: IState = {\n    todos: [],\n    show: 'pendient',\n}\n\nconst rootReducer = (state = initialState, action: Actions) => {\n    switch (action.type) {\n        case ADD_TODO: return {\n            ...state, \n            todos: [action.payload, ...state.todos]\n        }        \n        case DELETE_TODO: return {\n            ...state, \n            todos: state.todos.filter((todo: ITodo) => todo.id !== action.payload)\n        }\n        case FINISH_TODO: return {\n            ...state,\n            todos: state.todos.map((todo: ITodo) => \n                todo.id === action.payload ? \n                {\n                    ...todo,\n                    completed: true,\n                } : todo\n            )\n        }\n        case UNFINISH_TODO: return {\n            ...state, \n            todos: state.todos.map((todo: ITodo) => \n                todo.id === action.payload ? \n                {\n                    ...todo, \n                    completed: false, \n                } : todo\n            )\n        }\n        case SHOW: return {\n            ...state, \n            show: action.payload\n        }\n        default: return state \n    }\n}\n\nexport default rootReducer","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducer';\n\nconst store = createStore(\n    rootReducer, \n    applyMiddleware(thunk)\n)\n\nexport default store;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { extendTheme } from \"@chakra-ui/react\";\n\nexport default extendTheme({\n    styles: {\n        global: {\n            body: {\n                backgroundColor: '#E9E9E9',\n            },\n        },\n    },\n    colors: {\n        primary: '#63B3ED',\n    }\n})","import { ADD_TODO, DELETE_TODO, FINISH_TODO, UNFINISH_TODO, ITodo, SHOW } from \"./constants\";\n\nexport interface IAddTodoAction {\n    type: ADD_TODO, \n    payload: ITodo,\n}\n\nexport interface IDeleteTodoAction {\n    type: DELETE_TODO, \n    payload: number, \n}\n\nexport interface IFinishTodoAction {\n    type: FINISH_TODO, \n    payload: number, \n}\n\nexport interface IUnfinishTodoAction {\n    type: UNFINISH_TODO, \n    payload: number,\n}\n\nexport interface IShowAction {\n    type: SHOW,\n    payload: string,\n}\n\nexport type Actions = IAddTodoAction | IDeleteTodoAction |   IFinishTodoAction | IUnfinishTodoAction | IShowAction\n\nexport const addTodo = (payload: ITodo): IAddTodoAction => {\n    return { type: ADD_TODO, payload: payload }\n}\n\nexport const deleteTodo = (num: number): IDeleteTodoAction => {\n    return { type: DELETE_TODO, payload: num }\n}\n\nexport const finishTodo = (num: number): IFinishTodoAction => {\n    return { type: FINISH_TODO, payload: num } \n}\n\nexport const unfinishTodo = (num: number): IUnfinishTodoAction => {\n    return { type: UNFINISH_TODO, payload: num }\n}\n\nexport const show = (payload: string): IShowAction => {\n    return { type: SHOW, payload }\n}\n","import React from \"react\";\nimport { Stack, Button } from \"@chakra-ui/react\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { show } from \"../redux/actions\";\n\nconst NavBar: React.FC = () => {\n    const dispatch = useDispatch()\n\n    return (\n        <Stack \n            direction='row' \n            backgroundColor='white' \n            paddingTop={5} \n            borderBottomRadius='xl' \n            shadow='md' \n            width='100%'\n            opacity='100%'\n        >\n            <Stack direction='row' width='fit-content' margin='auto'>\n                <Link to='/tasks-administrator/'><Button\n                    width='20vw' \n                    textAlign='center' \n                    fontWeight='600' \n                    paddingBottom='1.5'\n                    background='transparent'\n                    _hover={{cursor:'pointer', color:'primary' }}\n                    _focus={{color:'primary'}} \n                    onClick={() => dispatch(show('pendient'))}\n                    >\n                    PENDIENT\n                </Button></Link>\n                <Link to='/tasks-administrator/completed'><Button\n                    width='20vw' \n                    textAlign='center' \n                    fontWeight='600' \n                    paddingBottom='1.5'\n                    background='transparent'\n                    _hover={{cursor:'pointer', color:'primary' }}\n                    _focus={{color:'primary'}}\n                    onClick={() => dispatch(show('completed'))}\n                    >COMPLETED\n                </Button></Link>\n            </Stack>\n        </Stack>\n    );\n};\n\nexport default NavBar;\n","import React, { useState } from 'react';\nimport { Button, Stack, Textarea, } from '@chakra-ui/react'\nimport { useDispatch } from 'react-redux';\nimport { addTodo } from '../redux/actions'\n\nconst Input: React.FC = () => {\n    const dispatch = useDispatch()\n    let [value, setValue] = useState('')\n\n    const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        e.preventDefault()\n        setValue(e.target.value)\n    }\n\n    const handleSubmit = () => {\n        let id = Date.now()\n        dispatch(addTodo({content: value, completed: false, id}))\n        setValue('')\n    }\n\n    return (\n        <Stack width='100%' top='10vh' alignItems='center'>\n            <Textarea \n                width='50vw'\n                value={value}\n                onChange={handleChange}\n                placeholder='Add a task... ' \n                border='1px solid' \n                borderColor='blackAlpha.900'\n                _hover={{border: '2px', borderColor: 'primary'}}\n                _focus={{border: '2px', orderColor:'blue.500'}}\n            />\n            <Button \n                onClick={handleSubmit}\n                colorScheme='green'\n                variant='outline'\n                width='20vw'\n                _hover={{background:'green.400', color: 'white'}}\n            >Add</Button>\n        </Stack>\n    )\n}\n\nexport default Input;","import React from \"react\";\nimport { Box, Container, Stack } from '@chakra-ui/react'\nimport { IState } from '../redux/constants'\nimport NavBar from './NavBar'\nimport Input from './Input'\nimport { useSelector } from \"react-redux\";\n\nconst Home: React.FC = () => {\n    return (\n        <Stack width='100%'>\n            <Box position='fixed' zIndex='9999' width='100%' opacity='100%' >\n                <NavBar />\n            </Box>\n            <Box position='absolute' top='15vh' width='100%' >\n                <Input />\n            </Box>\n        </Stack>\n    )\n}\n\nexport default Home;","import React from 'react';\nimport { Stack, Text, Button, Icon, Switch, StackDivider } from '@chakra-ui/react';\nimport { useDispatch } from 'react-redux';\nimport { ITodo } from '../redux/constants';\nimport { FaTrash } from 'react-icons/fa'\nimport { finishTodo, deleteTodo, unfinishTodo } from '../redux/actions';\n\ninterface props {\n    key: number, \n    todo: ITodo,\n}\n\nconst Card: React.FC <props> = ({todo}) => {\n    const dispatch = useDispatch()\n    const t = todo\n\n    const handleSwitch = () => {\n        t.completed === false ? dispatch(finishTodo(t.id)) : dispatch(unfinishTodo(t.id))\n    }\n\n    const handleClick = () => {\n        dispatch(deleteTodo(todo.id))\n    }\n\n    return (\n        <Stack \n            direction='row' \n            borderBottom='1px solid' \n            borderColor='primary'\n            width='60vw' \n            margin='auto' \n            padding={2}\n            justifyContent='space-between'\n            alignItems='center'\n        >\n            <Text width='55vw'>{todo.content}</Text>\n            <Stack direction='row' divider={<StackDivider/>} alignItems='center' width='10vw' justifyContent='space-around' >\n                <Stack alignItems='center'>\n                    <Text>Done</Text>\n                    <Switch defaultChecked={todo.completed} color='primary'  onChange={() => setTimeout(handleSwitch, 700)} />\n                </Stack>\n                <Button \n                    width='fit-content' \n                    background='transparent' \n                    _hover={{color: '#C53030',}} \n                    onClick={handleClick}\n                ><Icon as={FaTrash} /></Button>\n            </Stack>\n        </Stack>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport { Stack } from '@chakra-ui/react';\nimport { ITodo, IState } from '../redux/constants';\nimport { useSelector } from 'react-redux';\nimport Card from './Card';\n\ninterface ContainerProps {\n    todos: ITodo[], \n}\n\nconst Container: React.FC <ContainerProps> = ({todos}) => {\n    const s = useSelector((state: IState) => state.show)\n\n    return (\n        <Stack \n            spacing={2} \n            background='white' \n            borderRadius='md' \n            padding={2} \n            height='100vh'\n            width='100%'\n            position='absolute'\n            top='40vh'\n        >\n            <ul>\n            {\n                s === 'completed' ? todos.filter(t => t.completed === true).map(todo => <Card key={todo.id} todo={todo} />) :\n                todos.filter(t => t.completed === false).map(todo => <Card key={todo.id} todo={todo} />)\n            }\n            </ul>\n        </Stack>\n    )\n};\n\nexport default Container; ","import React from 'react';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport { useSelector } from 'react-redux'\nimport theme from './theme';\nimport Home from './components/Home'\nimport Container from './components/Container'\nimport { Route } from 'react-router';\nimport { IState, ITodo } from './redux/constants';\n\nconst App: React.FC = () => {\n  const t = useSelector((state: IState) => state.todos)\n\n  return (\n    <ChakraProvider theme={theme} >\n      <Route path='/' component={Home} />\n      <Route path='/tasks-administrator/' exact><Container todos={t} /></Route>\n      <Route path='/tasks-administrator/completed'><Container todos={t} /></Route>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}